"""_summary_

Rotate images in clockwise or anti-clockwise direction based on the degree value specified for rotation.

+ve values means anti-clockwise rotation and -ve values is clockwise rotation
Rotation is done using WarpAffine function with help of Rotation matrix generated by getRotationMatrix2D() function.

"""
__maintainer__ = "Nikunj Lad"

# import libraries
import cv2
import argparse
import imutils

# parse command-line arguments
ag = argparse.ArgumentParser()
ag.add_argument("-i", "--image", type=str, default="../../data/images/troupial.jpg", help="path to input image")
args = vars(ag.parse_args())

# read the input image
image = cv2.imread(args["image"])
cv2.imshow("original", image)

# calculate the center of the image and get the X,Y co-ordinates
(height, width) = image.shape[0:2]
(cX, cY) = (width // 2, height // 2)

# rotate the image around the center by 45 degress in anti-clockwise direction
M = cv2.getRotationMatrix2D((cX, cY), 45, 1.0)      # creating a rotation matrix with center (cX, cY), angle of 45 degrees and keeping scale as original
rotated = cv2.warpAffine(image, M, (width, height))
cv2.imshow("Image rotated 45 degress counter-clockwise", rotated)

# rotate the image around the center by 90 degress in clockwise direction
M = cv2.getRotationMatrix2D((cX, cY), -90, 1.0)      # creating a rotation matrix with center (cX, cY), angle of 90 degrees and keeping scale as original
rotated = cv2.warpAffine(image, M, (width, height))
cv2.imshow("Image rotated 90 degress clockwise", rotated)

# rotate the image around arbitary image location by 45 degress in anti-clockwise direction
M = cv2.getRotationMatrix2D((40, 90), 35, 1.0)      # creating a rotation matrix with center (cX, cY), angle of 35 degrees and keeping scale as original
rotated = cv2.warpAffine(image, M, (width, height))
cv2.imshow("Image rotated 35 degress counter-clockwise", rotated)

# rotate the image around center by 180 degress in anti-lockwise direction
rotated = imutils.rotate(image, 180)        # using imutils to rotate an image and also to avoid having complicated logic
cv2.imshow("Image rotated 180 degress counter-clockwise", rotated)

# rotate the image around center by -65 degress in clockwise direction
rotated = imutils.rotate_bound(image, -65)        # using imutils to rotate an image but also ensure it does not get cut off from its bounds due to rotation operation
cv2.imshow("Image rotated 65 degress clockwise", rotated)
cv2.waitKey(0)
cv2.destroyAllWindows()

